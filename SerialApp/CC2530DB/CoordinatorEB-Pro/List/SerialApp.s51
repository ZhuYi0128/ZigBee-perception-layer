///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        13/Apr/2017  21:33:29 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\Source\SerialApp. /
//                          c                                                 /
//    Command line       =  -f C:\Users\Administrator\Desktop\桌面文件\1.17\P /
//                          rojects\zstack\Utilities\SerialApp\CC2530DB\..\.. /
//                          \..\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ       /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f   /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \Tools\CC2530DB\f8wConfig.cfg (-DSECURE=0         /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 C:\Users\Administrator\Des /
//                          ktop\桌面文件\1.17\Projects\zstack\Utilities\Seri /
//                          alApp\Source\SerialApp.c -D ZIGBEEPRO -D          /
//                          HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D             /
//                          LCD_SUPPORTED -D NV_RESTORE -lC                   /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\Coordina /
//                          torEB-Pro\List\ -lA C:\Users\Administrator\Deskto /
//                          p\桌面文件\1.17\Projects\zstack\Utilities\SerialA /
//                          pp\CC2530DB\CoordinatorEB-Pro\List\               /
//                          --diag_suppress Pe001,Pa010 -o                    /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\Coordina /
//                          torEB-Pro\Obj\ -e --no_unroll --no_inline         /
//                          --no_tbaa --debug --core=plain --dptr=16,1        /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 8    /
//                          -I C:\Users\Administrator\Desktop\桌面文件\1.17\P /
//                          rojects\zstack\Utilities\SerialApp\CC2530DB\ -I   /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\SOURC /
//                          E\ -I C:\Users\Administrator\Desktop\桌面文件\1.1 /
//                          7\Projects\zstack\Utilities\SerialApp\CC2530DB\.. /
//                          \..\..\ZMAIN\TI2530DB\ -I                         /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\MT\ -I                          /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\HAL\INCLUDE\ -I                 /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\HAL\TARGET\CC2530EB\ -I         /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I              /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\OSAL\INCLUDE\ -I                /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\AF\ -I                    /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\NWK\ -I                   /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\SEC\ -I                   /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\SAPI\ -I                  /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\SYS\ -I                   /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\STACK\ZDO\ -I                   /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\ZMAC\F8W\ -I                    /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\ZMAC\ -I                        /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\SERVICES\SADDR\ -I              /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\SERVICES\SDATA\ -I              /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\MAC\INCLUDE\ -I                 /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I              /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\ -I         /
//                          C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\..\..\.. /
//                          \..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP /
//                          \ -Om --require_prototypes                        /
//    List file          =  C:\Users\Administrator\Desktop\桌面文件\1.17\Proj /
//                          ects\zstack\Utilities\SerialApp\CC2530DB\Coordina /
//                          torEB-Pro\List\SerialApp.s51                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SerialApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_DIV_MOD
        EXTERN ?US_SWITCH_DENSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??GetBfan?relay,0203H
        FUNCTION ??GetDAMP?relay,0203H
        FUNCTION ??GetDRIP?relay,0203H
        FUNCTION ??GetHUM?relay,0203H
        FUNCTION ??GetLED?relay,0203H
        FUNCTION ??GetSfan?relay,0203H
        FUNCTION ??Getheat?relay,0203H
        PUBLIC ??SendData?relay
        FUNCTION ??SendData?relay,0203H
        FUNCTION ??SerialApp_CallBack?relay,0203H
        FUNCTION ??SerialApp_HandleKeys?relay,0203H
        PUBLIC ??SerialApp_Init?relay
        FUNCTION ??SerialApp_Init?relay,0203H
        PUBLIC ??SerialApp_ProcessEvent?relay
        FUNCTION ??SerialApp_ProcessEvent?relay,0203H
        FUNCTION ??SerialApp_ProcessMSGCmd?relay,0203H
        FUNCTION ??SerialApp_Resp?relay,0203H
        FUNCTION ??SerialApp_Send?relay,0203H
        FUNCTION ??SerialApp_SendPeriodicMessage?relay,0203H
        PUBLIC `Data`
        FUNCTION GetBfan,0203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCTION GetDAMP,0203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCTION GetDRIP,0203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCTION GetHUM,0203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCTION GetLED,0203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCTION GetSfan,0203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCTION Getheat,0203H
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUBLIC NodeData1
        PUBLIC NodeData2
        PUBLIC NodeData3
        PUBWEAK P0SEL
        PUBLIC SendData
        FUNCTION SendData,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION SerialApp_CallBack,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SerialApp_ClusterList
        FUNCTION SerialApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 29, STACK
        PUBLIC SerialApp_Init
        FUNCTION SerialApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC SerialApp_ProcessEvent
        FUNCTION SerialApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION SerialApp_ProcessMSGCmd,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 44, STACK
        FUNCTION SerialApp_Resp,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        FUNCTION SerialApp_Send,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        FUNCTION SerialApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 87, STACK
        PUBLIC SerialApp_SimpleDesc
        PUBLIC SerialApp_TaskID
        PUBLIC SerialApp_epDesc
        PUBLIC TxBuffer
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK __Constant_2710
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_64
        PUBWEAK __Constant_a
        PUBLIC high_flag
        PUBLIC low_flag
        PUBLIC lux_warn_flag
        PUBLIC pump_flag
        PUBLIC shihigh_flag
        PUBLIC shilow_flag
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalUARTOpen         SYMBOL "HalUARTOpen"
osal_rand           SYMBOL "osal_rand"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
HalLedSet           SYMBOL "HalLedSet"
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
osal_memcpy         SYMBOL "osal_memcpy"
HalUARTWrite        SYMBOL "HalUARTWrite"
HalUARTRead         SYMBOL "HalUARTRead"
AF_DataRequest      SYMBOL "AF_DataRequest"
Onboard_wait        SYMBOL "Onboard_wait"
osal_set_event      SYMBOL "osal_set_event"
DHT11               SYMBOL "DHT11"
B_LUX_GetLux        SYMBOL "B_LUX_GetLux"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??B_LUX_GetLux?relay SYMBOL "?relay", B_LUX_GetLux
??DHT11?relay       SYMBOL "?relay", DHT11
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
SendData            SYMBOL "SendData"
??SendData?relay    SYMBOL "?relay", SendData
SerialApp_Init      SYMBOL "SerialApp_Init"
??SerialApp_Init?relay SYMBOL "?relay", SerialApp_Init
SerialApp_ProcessEvent SYMBOL "SerialApp_ProcessEvent"
??SerialApp_ProcessEvent?relay SYMBOL "?relay", SerialApp_ProcessEvent

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN DHT11
        FUNCTION DHT11,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN B_LUX_GetLux
        FUNCTION B_LUX_GetLux,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??B_LUX_GetLux?relay
        FUNCTION ??B_LUX_GetLux?relay,00H
        EXTERN ??DHT11?relay
        FUNCTION ??DHT11?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN shidu
        EXTERN wendu

// C:\Users\Administrator\Desktop\桌面文件\1.17\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c
//    1 /*********************************************************************
//    2 * INCLUDES 
//    3 6.19
//    4 
//    5 */
//    6 #include <stdio.h>
//    7 #include <string.h>
//    8 
//    9 #include "AF.h"
//   10 #include "OnBoard.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1
//   11 #include "OSAL_Tasks.h"
//   12 #include "SerialApp.h"
//   13 #include "ZDApp.h"
//   14 #include "ZDObject.h"
//   15 #include "ZDProfile.h"
//   16 #include "B_LUX_V20.h"
//   17 #include "hal_drivers.h"
//   18 #include "hal_key.h"
//   19 #if defined ( LCD_SUPPORTED )
//   20 #include "hal_lcd.h"
//   21 #endif
//   22 #include "hal_led.h"
//   23 #include "hal_uart.h"
//   24 
//   25 #include "DHT11.h"
//   26 #include "nwk_globals.h"
//   27 
//   28 /*********************************************************************
//   29 * MACROS
//   30 */
//   31 #define COORD_ADDR   0x00
//   32 #define ED_ADDR      0x01
//   33 #define UART0        0x00
//   34 //#define MAX_NODE     0x04
//   35 #define UART_DEBUG   0x00        //调试宏,通过串口输出协调器和终端的IEEE、短地址
//   36 //#define LAMP_PIN     P0_4        //定义P0.4口为继电器输入端
//   37 //#define GAS_PIN      P0_5        //定义P0.5口为烟雾传感器的输入端  
//   38 
//   39 #define LED_PIN      P0_0           //定义P0.3口为植物光LED继电器输入端
//   40 #define heat_PIN     P1_0           //定义P0.4口为加热垫继电器输入端
//   41 #define Bfan_PIN     P0_4          //定义P0.5口为大风机继电器输入端
//   42 #define Sfan_PIN     P0_0          //定义P0.6口为小风机继电器输入端
//   43 #define DRIP_PIN     P0_5
//   44 #define HUM_PIN      P1_1           //定义P0.2口为土壤湿度2输入端
//   45 #define DAMP_PIN     P0_6
//   46 #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
//   47 
//   48 //---------------------------------------------------------------------
//   49 //标准版不同的终端需要修改此ID,用于识别协调器发过来的数据，ID相同则处理
//   50 //专业版自动从Flash获得地址，所有终端固件相同，适合量产

        RSEG XDATA_I:XDATA:NOROOT(0)
//   51 static uint16 EndDeviceID = 0x01; //终端ID，重要
EndDeviceID:
        DATA16
        DS 2
        REQUIRE `?<Initializer for EndDeviceID>`
        REQUIRE __INIT_XDATA_I
//   52 //---------------------------------------------------------------------
//   53 
//   54 /*********************************************************************
//   55 * CONSTANTS
//   56 */
//   57 
//   58 #if !defined( SERIAL_APP_PORT )
//   59 #define SERIAL_APP_PORT  0
//   60 #endif
//   61 
//   62 #if !defined( SERIAL_APP_BAUD )
//   63 #define SERIAL_APP_BAUD  HAL_UART_BR_9600
//   64 //#define SERIAL_APP_BAUD  HAL_UART_BR_115200
//   65 #endif
//   66 
//   67 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//   68 #if !defined( SERIAL_APP_THRESH )
//   69 #define SERIAL_APP_THRESH  64
//   70 #endif
//   71 
//   72 #if !defined( SERIAL_APP_RX_SZ )
//   73 #define SERIAL_APP_RX_SZ  128
//   74 #endif
//   75 
//   76 #if !defined( SERIAL_APP_TX_SZ )
//   77 #define SERIAL_APP_TX_SZ  128
//   78 #endif
//   79 
//   80 // Millisecs of idle time after a byte is received before invoking Rx callback.
//   81 #if !defined( SERIAL_APP_IDLE )
//   82 #define SERIAL_APP_IDLE  6
//   83 #endif
//   84 
//   85 // Loopback Rx bytes to Tx for throughput testing.
//   86 #if !defined( SERIAL_APP_LOOPBACK )
//   87 #define SERIAL_APP_LOOPBACK  FALSE
//   88 #endif
//   89 
//   90 // This is the max byte count per OTA message.
//   91 #if !defined( SERIAL_APP_TX_MAX )
//   92 #define SERIAL_APP_TX_MAX  20
//   93 #endif
//   94 
//   95 #define SERIAL_APP_RSP_CNT  4
//   96 
//   97 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   98 const cId_t SerialApp_ClusterList[SERIALAPP_MAX_CLUSTERS] =
SerialApp_ClusterList:
        DATA16
        DW 1
        DW 0
//   99 {
//  100 	SERIALAPP_CLUSTERID
//  101 };
//  102 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  103 const SimpleDescriptionFormat_t SerialApp_SimpleDesc =
SerialApp_SimpleDesc:
        DB 11
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SerialApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SerialApp_ClusterList
//  104 {
//  105     SERIALAPP_ENDPOINT,              //  int   Endpoint;                端口号
//  106     SERIALAPP_PROFID,                //  uint16 AppProfId[2];           profile ID
//  107     SERIALAPP_DEVICEID,              //  uint16 AppDeviceId[2];         设备ID
//  108     SERIALAPP_DEVICE_VERSION,        //  int   AppDevVer:4;             版本号
//  109     SERIALAPP_FLAGS,                 //  int   AppFlags:4;              程序标识
//  110     SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;        输入命令数
//  111     (cId_t *)SerialApp_ClusterList,  //  byte *pAppInClusterList;       输入命令表
//  112     SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumOutClusters;       输出命令数
//  113     (cId_t *)SerialApp_ClusterList   //  byte *pAppOutClusterList;      输出命令表
//  114 };
//  115 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  116 const endPointDesc_t SerialApp_epDesc =                 // 端口描述符
SerialApp_epDesc:
        DB 11
        DATA16
        DW SerialApp_TaskID
        DW SerialApp_SimpleDesc
        DATA8
        DB 0
//  117 { 
//  118     SERIALAPP_ENDPOINT,                                 // 端口号
//  119     &SerialApp_TaskID,                                  // 任务ID
//  120     (SimpleDescriptionFormat_t *)&SerialApp_SimpleDesc, // 简单描述符
//  121     noLatencyReqs                                       // 网络启动模式（ noLatencyReqs fastBeacons slowBeacons）
//  122 };
//  123 
//  124 /*********************************************************************
//  125 * TYPEDEFS
//  126 */
//  127 
//  128 /*********************************************************************
//  129 * GLOBAL VARIABLES
//  130 */
//  131 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  132 uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
SerialApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  133 
//  134 /*********************************************************************
//  135 * EXTERNAL VARIABLES
//  136 */
//  137 
//  138 /*********************************************************************
//  139 * EXTERNAL FUNCTIONS
//  140 */
//  141 
//  142 /*********************************************************************
//  143 * LOCAL VARIABLES
//  144 */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  145 static bool SendFlag = 0;   // 就两个状态 0或者1 
SendFlag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  146 
//  147 static uint8 SerialApp_MsgID;
//  148 
//  149 static afAddrType_t SerialApp_TxAddr;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  150 static afAddrType_t Broadcast_DstAddr;
Broadcast_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  151 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  152 static uint8 SerialApp_TxSeq;
SerialApp_TxSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  153 static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];
SerialApp_TxBuf:
        DS 21
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  154 static uint8 SerialApp_TxLen;
SerialApp_TxLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  155 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  156 static afAddrType_t SerialApp_RxAddr;
SerialApp_RxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  157 static uint8 SerialApp_RspBuf[SERIAL_APP_RSP_CNT];
SerialApp_RspBuf:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  158 uint8 low_flag;
low_flag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  159 uint8 high_flag;
high_flag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  160 uint8 shilow_flag;
shilow_flag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  161 uint8 shihigh_flag;
shihigh_flag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  162 uint8 lux_warn_flag;
lux_warn_flag:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  163 uint8 pump_flag;
pump_flag:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  164 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  165 static devStates_t SerialApp_NwkState;
SerialApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  166 static afAddrType_t SerialApp_TxAddr;
SerialApp_TxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  167 static uint8 SerialApp_MsgID;
SerialApp_MsgID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  168 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  169 uint8 NodeData1[15];         //终端数据缓冲区 0=温度 1=湿度 2=气体 3=灯  [MAX_NODE]
NodeData1:
        DS 15
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  170 uint8 NodeData2[15];
NodeData2:
        DS 15
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  171 uint8 NodeData3[15];
NodeData3:
        DS 15
        REQUIRE __INIT_XDATA_Z
//  172 /*********************************************************************
//  173 * LOCAL FUNCTIONS
//  174 */
//  175 
//  176 static void SerialApp_HandleKeys( uint8 shift, uint8 keys );
//  177 static void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
//  178 static void SerialApp_Send(void);
//  179 static void SerialApp_Resp(void);
//  180 static void SerialApp_CallBack(uint8 port, uint8 event);
//  181 
//  182 //static void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr);
//  183 //static void AfSendAddrInfo(void);
//  184 //static void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr);
//  185 static void SerialApp_SendPeriodicMessage( void );
//  186 //static uint8 GetDataLen(uint8 fc);
//  187 /*static uint8 GetLamp( void );
//  188 static uint8 GetGas( void );*/
//  189 static uint8 GetHUM( void );
//  190 static uint8 GetLED( void );
//  191 static uint8 Getheat( void );
//  192 static uint8 GetDRIP( void );
//  193 static uint8 GetDAMP( void );
//  194 static uint8 GetBfan( void );
//  195 static uint8 GetSfan( void );
//  196 //static uint8 XorCheckSum(uint8 * pBuf, uint8 len);
//  197 uint8 SendData(uint8 AD,uint8 TP);
//  198 /*********************************************************************
//  199 * @fn      SerialApp_Init
//  200 *
//  201 * @brief   This is called during OSAL tasks' initialization.
//  202 *
//  203 * @param   task_id - the Task ID assigned by OSAL.
//  204 *
//  205 * @return  none
//  206 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  207 void SerialApp_Init( uint8 task_id )
SerialApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SerialApp_Init
        CODE
//  208 {
        FUNCALL SerialApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
        MOV     R6,A
//  209 	halUARTCfg_t uartConfig;
//  210     
//  211     /*P0SEL &= 0xEf;                  //设置P0.4口为普通IO
//  212     P0DIR |= 0x10;                  //设置P0.4为输出
//  213     LAMP_PIN = 1;                   //高电平继电器断开;低电平继电器吸合
//  214     P0SEL &= ~0x20;                 //设置P0.5为普通IO口
//  215     P0DIR &= ~0x20;                 //P0.5定义为输入口
//  216     P0SEL &= 0x7f;                  //P0_7配置成通用io*/
//  217     
//  218     //P0SEL &= 0x8e;                  //设置P0.0、0.4、0.5、0.6口为普通IO
//  219     //P0DIR |= 0x71;                  //设置PP0.0、0.4、0.5、0.6为输出
//  220     
//  221     P0SEL &= 0x7f;                  //P0_7配置成通用io
        ANL     0xf3,#0x7f
//  222     
//  223     //P0SEL &= 0x3f;    
//  224         
//  225     //P1SEL &= 0xfe;                  //P1.0设置为普通口
//  226     //P1DIR |= 0x01;                  //P1.0设置为输出口
//  227     //P1SEL &= ~0x02;                 //设置P1.1为普通IO口
//  228     //P1DIR &= ~0x02;                 //设置P1.1为输入口
//  229     
//  230     LED_PIN  = 1;
        SETB    0x80.0
//  231     heat_PIN = 1;
        SETB    0x90.0
//  232     Bfan_PIN = 0;
        CLR     0x80.4
//  233     Sfan_PIN = 1;
        SETB    0x80.0
//  234     DAMP_PIN = 1;
        SETB    0x80.6
//  235     DRIP_PIN = 1;                  //高电平继电器断开;低电平继电器吸合
        SETB    0x80.5
//  236 	
//  237 	SerialApp_TaskID = task_id;
        MOV     DPTR,#SerialApp_TaskID
        MOVX    @DPTR,A
//  238 	//SerialApp_RxSeq = 0xC3;
//  239 	
//  240 	afRegister( (endPointDesc_t *)&SerialApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SerialApp_epDesc & 0xff
        MOV     R3,#(SerialApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  241 	
//  242 	RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     A,R6
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  243 	
//  244 	uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  245 	uartConfig.baudRate             = SERIAL_APP_BAUD;   // 波特率
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  246 	uartConfig.flowControl          = FALSE;             // 流控
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  247 	uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 流控阀值
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  248 	uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 最大接收量
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  249 	uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 最大发送量
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  250 	uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  251 	uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  252 	uartConfig.callBackFunc         = SerialApp_CallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??SerialApp_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??SerialApp_CallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  253 	HalUARTOpen (UART0, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  254 	
//  255 //#if defined ( LCD_SUPPORTED )
//  256 //	HalLcdWriteString( "SerialApp", HAL_LCD_LINE_2 );
//  257 //#endif
//  258 	//HalUARTWrite(UART0, "Init", 4);
//  259 	//ZDO_RegisterForZDOMsg( SerialApp_TaskID, End_Device_Bind_rsp );
//  260 	//ZDO_RegisterForZDOMsg( SerialApp_TaskID, Match_Desc_rsp );
//  261 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 9)
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE P0SEL
        REQUIRE _A_P0
        REQUIRE _A_P1
//  262 
//  263 /*********************************************************************
//  264 * @fn      SerialApp_ProcessEvent
//  265 *
//  266 * @brief   Generic Application Task event processor.
//  267 *
//  268 * @param   task_id  - The OSAL assigned task ID.
//  269 * @param   events   - Bit map of events to process.
//  270 *
//  271 * @return  Event flags of all unprocessed events.
//  272 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  273 UINT16 SerialApp_ProcessEvent( uint8 task_id, UINT16 events )
SerialApp_ProcessEvent:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function SerialApp_ProcessEvent
        CODE
//  274 {
        FUNCALL SerialApp_ProcessEvent, SerialApp_SendPeriodicMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, SerialApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, SerialApp_ProcessMSGCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, SerialApp_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, SerialApp_Resp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  275 	(void)task_id;  // Intentionally unreferenced parameter
//  276 	
//  277 	if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     ??SerialApp_ProcessEvent_0
//  278 	{
//  279 		afIncomingMSGPacket_t *MSGpkt;
//  280 		
//  281 		while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SerialApp_TaskID )) )
//  282 		{
//  283 			switch ( MSGpkt->hdr.event )
//  284 			{
//  285 			case ZDO_CB_MSG:
//  286 				//SerialApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  287 				break;
//  288 				
//  289 			case KEY_CHANGE:
//  290 				SerialApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  291 				break;
//  292 				
//  293 			case AF_INCOMING_MSG_CMD:  // 接受到命令 然后执行
//  294 				SerialApp_ProcessMSGCmd( MSGpkt ); // 执行进来的消息命令的回调函数
//  295 				break;
//  296                 
//  297             case ZDO_STATE_CHANGE:
//  298               SerialApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  299               if ( (SerialApp_NwkState == DEV_ZB_COORD)
//  300                   || (SerialApp_NwkState == DEV_ROUTER)
//  301                   || (SerialApp_NwkState == DEV_END_DEVICE) )
//  302               {
//  303                 #if defined(ZDO_COORDINATOR) //协调器通过串口输出自身短地址、IEEE  
//  304                     Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
//  305                     Broadcast_DstAddr.endPoint = SERIALAPP_ENDPOINT;
//  306                     Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
//  307                     #if UART_DEBUG           
//  308                     PrintAddrInfo( NLME_GetShortAddr(), aExtendedAddress + Z_EXTADDR_LEN - 1);
//  309                     #endif 
//  310                     //初始化灯的状态，1为熄灭状态，0为点亮
//  311                     //NodeData[3] = 1;
//  312                     /*NodeData[1][3] = 1;
//  313                     NodeData[2][3] = 1;
//  314                     NodeData[3][3] = 1;*/
//  315                 #else                        //终端无线发送短地址、IEEE   
//  316                     //AfSendAddrInfo();
//  317                 #endif
//  318                 
//  319               }
//  320               break;				
//  321 			default:
//  322 				break;
//  323 			}
//  324 			
//  325 			osal_msg_deallocate( (uint8 *)MSGpkt );
//  326 		}
//  327 		
//  328 		return ( events ^ SYS_EVENT_MSG );
//  329 	}
//  330     
//  331     //在此事件中可以定时向协调器发送节点传感器参数信息
//  332     if ( events & SERIALAPP_SEND_PERIODIC_EVT )
        MOV     A,R6
        ANL     A,#0x3
        JNZ     $+5
        LJMP    ??SerialApp_ProcessEvent_1 & 0xFFFF
//  333     {
//  334         SerialApp_SendPeriodicMessage();
        ; Setup parameters for call to function SerialApp_SendPeriodicMessage
        LCALL   ??SerialApp_SendPeriodicMessage?relay
//  335         
//  336         osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
//  337             (SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0xc
        MOV     R4,A
        CLR     A
        ADDC    A,#0x1
        MOV     R5,A
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  338         
//  339         return (events ^ SERIALAPP_SEND_PERIODIC_EVT);
        MOV     A,R6
        XRL     A,#0x3
??SerialApp_ProcessEvent_2:
        MOV     R2,A
        MOV     A,R7
??SerialApp_ProcessEvent_3:
        MOV     R3,A
        LJMP    ??SerialApp_ProcessEvent_4 & 0xFFFF
//  340     }
??SerialApp_ProcessEvent_5:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SerialApp_NwkState
        MOVX    @DPTR,A
        MOVX    A,@DPTR
        XRL     A,#0x9
        JZ      ??SerialApp_ProcessEvent_6
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??SerialApp_ProcessEvent_6
        MOVX    A,@DPTR
        XRL     A,#0x6
        JNZ     ??SerialApp_ProcessEvent_7
??SerialApp_ProcessEvent_6:
        MOV     DPTR,#Broadcast_DstAddr + 8
        MOV     A,#0xf
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
        MOV     DPTR,#Broadcast_DstAddr
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
??SerialApp_ProcessEvent_7:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
??SerialApp_ProcessEvent_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??SerialApp_ProcessEvent_8
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SerialApp_ProcessEvent_9
        ADD     A,#0x5a
        JZ      ??SerialApp_ProcessEvent_10
        ADD     A,#-0x11
        JZ      ??SerialApp_ProcessEvent_5
        SJMP    ??SerialApp_ProcessEvent_7
??SerialApp_ProcessEvent_10:
        ; Setup parameters for call to function SerialApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??SerialApp_HandleKeys?relay
        SJMP    ??SerialApp_ProcessEvent_7
??SerialApp_ProcessEvent_9:
        ; Setup parameters for call to function SerialApp_ProcessMSGCmd
        LCALL   ??SerialApp_ProcessMSGCmd?relay
        SJMP    ??SerialApp_ProcessEvent_7
??SerialApp_ProcessEvent_8:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        SJMP    ??SerialApp_ProcessEvent_3
//  341     
//  342 	if ( events & SERIALAPP_SEND_EVT )
??SerialApp_ProcessEvent_1:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??SerialApp_ProcessEvent_11
//  343 	{
//  344 		SerialApp_Send();
        ; Setup parameters for call to function SerialApp_Send
        LCALL   ??SerialApp_Send?relay
//  345 		return ( events ^ SERIALAPP_SEND_EVT );
        MOV     A,R6
        XRL     A,#0x1
        LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
//  346 	}
//  347 	
//  348 	if ( events & SERIALAPP_RESP_EVT )
??SerialApp_ProcessEvent_11:
        ANL     A,#0x2
        JZ      ??SerialApp_ProcessEvent_12
//  349 	{
//  350 		SerialApp_Resp();
        ; Setup parameters for call to function SerialApp_Resp
        LCALL   ??SerialApp_Resp?relay
//  351 		return ( events ^ SERIALAPP_RESP_EVT );
        MOV     A,R6
        XRL     A,#0x2
        LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
//  352 	}
//  353 	
//  354 	return ( 0 ); 
??SerialApp_ProcessEvent_12:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SerialApp_ProcessEvent_4:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  355 }
//  356 
//  357 /*********************************************************************
//  358 * @fn      SerialApp_HandleKeys
//  359 *
//  360 * @brief   Handles all key events for this device.
//  361 *
//  362 * @param   shift - true if in shift/alt.
//  363 * @param   keys  - bit field for key events.
//  364 *
//  365 * @return  none
//  366 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  367 void SerialApp_HandleKeys( uint8 shift, uint8 keys )
SerialApp_HandleKeys:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SerialApp_HandleKeys
        CODE
//  368 {
        FUNCALL SerialApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_HandleKeys, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R2
        MOV     R7,A
//  369 	zAddrType_t txAddr;
//  370 	
//  371     if ( keys & HAL_KEY_SW_6 ) //按S1键启动或停止终端定时上报数据 
        MOV     C,0xE0 /* A   */.5
        JNC     ??SerialApp_HandleKeys_0
//  372     {
//  373       if(SendFlag == 0)
        MOV     DPTR,#SendFlag
        MOVX    A,@DPTR
        JNZ     ??SerialApp_HandleKeys_1
//  374         {
//  375         SendFlag = 1;
        MOV     A,#0x1
        MOVX    @DPTR,A
//  376         HalLedSet ( HAL_LED_1, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,A
        LCALL   ??HalLedSet?relay
//  377         osal_start_timerEx( SerialApp_TaskID,
//  378                             SERIALAPP_SEND_PERIODIC_EVT,
//  379                             SERIALAPP_SEND_PERIODIC_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0xc
        MOV     R5,#0x1
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        SJMP    ??SerialApp_HandleKeys_0
//  380         }
//  381         else
//  382         {      
//  383             SendFlag = 0;
??SerialApp_HandleKeys_1:
        CLR     A
        MOVX    @DPTR,A
//  384             HalLedSet ( HAL_LED_1, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,A
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  385             osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
//  386         }
//  387     }
//  388     
//  389     if ( keys & HAL_KEY_SW_1 ) //按S2
//  390     {
//  391         //LAMP_PIN = ~LAMP_PIN;
//  392     }
//  393     
//  394     if ( keys & HAL_KEY_SW_2 )
??SerialApp_HandleKeys_0:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.1
        JNC     ??SerialApp_HandleKeys_2
//  395     {
//  396         HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  397         
//  398         // Initiate an End Device Bind Request for the mandatory endpoint
//  399         txAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  400         txAddr.addr.shortAddr = 0x0000; // Coordinator
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  401         ZDP_EndDeviceBindReq( &txAddr, NLME_GetShortAddr(), 
//  402             SerialApp_epDesc.endPoint,
//  403             SERIALAPP_PROFID,
//  404             SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
//  405             SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
//  406             FALSE );
        MOV     ?V0 + 0,#SerialApp_ClusterList & 0xff
        MOV     ?V0 + 1,#(SerialApp_ClusterList >> 8) & 0xff
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 2,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0xf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0xb
        MOV     R1,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_EndDeviceBindReq?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  407     }
//  408     
//  409     if ( keys & HAL_KEY_SW_3 )
//  410     {
//  411     }
//  412     
//  413     if ( keys & HAL_KEY_SW_4 )
??SerialApp_HandleKeys_2:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.3
        JNC     ??SerialApp_HandleKeys_3
//  414     {
//  415         HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  416         
//  417         // Initiate a Match Description Request (Service Discovery)
//  418         txAddr.addrMode = AddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        MOVX    @DPTR,A
//  419         txAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  420         ZDP_MatchDescReq( &txAddr, NWK_BROADCAST_SHORTADDR,
//  421             SERIALAPP_PROFID,
//  422             SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
//  423             SERIALAPP_MAX_CLUSTERS, (cId_t *)SerialApp_ClusterList,
//  424             FALSE );
        MOV     ?V0 + 0,#SerialApp_ClusterList & 0xff
        MOV     ?V0 + 1,#(SerialApp_ClusterList >> 8) & 0xff
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 2,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0x5
        MOV     ?V0 + 1,#0xf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     R1,#0x2
        MOV     R4,#-0x1
        MOV     R5,#-0x1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_MatchDescReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  425     }
//  426 
//  427 }
??SerialApp_HandleKeys_3:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  428 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  429 void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
SerialApp_ProcessMSGCmd:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SerialApp_ProcessMSGCmd
        CODE
//  430 {
        FUNCALL SerialApp_ProcessMSGCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
//  431     uint8 delay;
//  432     
//  433     uint8 Data[10];
//  434     uint8 afRxData[30]={0};
        MOV     DPTR,#`?<Constant {0}>`
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x1e
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  435         Data[0] = 0xA5;
//  436         Data[1] = 0x07;
//  437         Data[5] = 0x0D;
//  438         Data[6] = 0x0A;
//  439     	
//  440         switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_DENSE
`?<Jumptable for SerialApp_ProcessMSGCmd>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DW        1
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SerialApp_ProcessMSGCmd_0
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SerialApp_ProcessMSGCmd_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??SerialApp_ProcessMSGCmd_2
        CODE
//  441 	{
//  442 	case SERIALAPP_CLUSTERID:
//  443         osal_memcpy(afRxData, pkt->cmd.Data, pkt->cmd.DataLength);
??SerialApp_ProcessMSGCmd_1:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R2
        ADD     A,#0x21
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R2
        ADD     A,#0x1f
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
//  444 		switch(afRxData[0]) //简单协议命令字解析
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0xa5
        JZ      $+5
        LJMP    ??SerialApp_ProcessMSGCmd_0 & 0xFFFF
//  445 		{
//  446 #if defined(ZDO_COORDINATOR)
//  447 		
//  448 		case 0xA5:     // 获取终端传感器数据
//  449             if(afRxData[2] == 0x0A) //收到终端传过来的传感器数据并保存
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xa
        JZ      $+5
        LJMP    ??SerialApp_ProcessMSGCmd_0 & 0xFFFF
//  450             {  
//  451                 /*NodeData[0] = afRxData[3];
//  452                 NodeData[1] = afRxData[4];22222222222222222222222222222222222222222222222222222
//  453                 NodeData[2] = afRxData[5];
//  454                 NodeData[3] = afRxData[6];
//  455                 NodeData[4] = 0x00;*/
//  456                 if(afRxData[3] == 0x01)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??SerialApp_ProcessMSGCmd_3
//  457                  {
//  458                   NodeData1[0] = afRxData[3];
        MOV     DPTR,#NodeData1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  459                   NodeData1[1] = afRxData[6];
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#NodeData1 + 1
        MOVX    @DPTR,A
//  460                   NodeData1[2] = afRxData[7];
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#NodeData1 + 2
        MOVX    @DPTR,A
//  461                   NodeData1[3] = afRxData[8];
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#NodeData1 + 3
        MOVX    @DPTR,A
//  462                   NodeData1[4] = afRxData[9];
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#NodeData1 + 4
        MOVX    @DPTR,A
//  463                   NodeData1[5] = afRxData[10];
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#NodeData1 + 5
        MOVX    @DPTR,A
//  464                   NodeData1[6] = afRxData[13];
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#NodeData1 + 6
        MOVX    @DPTR,A
//  465                   NodeData1[7] = afRxData[14];
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#NodeData1 + 7
        MOVX    @DPTR,A
//  466                   NodeData1[8] = 0x00;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  467                  }
//  468                 
//  469                 if(afRxData[3] == 0x02)
??SerialApp_ProcessMSGCmd_3:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??SerialApp_ProcessMSGCmd_4
//  470                 {
//  471                 NodeData2[0] = afRxData[3];
        MOV     DPTR,#NodeData2
        MOV     A,#0x2
        MOVX    @DPTR,A
//  472                 NodeData2[1] = afRxData[11];
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#NodeData2 + 1
        MOVX    @DPTR,A
//  473                 NodeData2[2] = afRxData[12];
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#NodeData2 + 2
        MOVX    @DPTR,A
//  474                 NodeData2[3] = afRxData[4];
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#NodeData2 + 3
        MOVX    @DPTR,A
//  475                 NodeData2[4] = 0x00;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  476                 }
//  477                 
//  478                 if(afRxData[3] == 0x03)
??SerialApp_ProcessMSGCmd_4:
        MOV     A,#0x3
        XRL     A,R0
        JZ      $+5
        LJMP    ??SerialApp_ProcessMSGCmd_0 & 0xFFFF
//  479                 {
//  480                 NodeData3[0] = afRxData[3];
        MOV     DPTR,#NodeData3
        MOV     A,#0x3
        MOVX    @DPTR,A
//  481                 NodeData3[1] = afRxData[15];
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#NodeData3 + 1
        MOVX    @DPTR,A
//  482                 NodeData3[2] = afRxData[5];
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#NodeData3 + 2
        MOVX    @DPTR,A
//  483                 NodeData3[3] = afRxData[17];
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#NodeData3 + 3
        MOVX    @DPTR,A
//  484                 NodeData3[4] = afRxData[16];
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPTR,#NodeData3 + 4
        MOVX    @DPTR,A
//  485                 NodeData3[5] = 0x00;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        SJMP    ??SerialApp_ProcessMSGCmd_0
//  486                 }
//  487                 
//  488             /*    
//  489                if( NodeData1[0]== 0x01 && NodeData1[3]<=0x01)
//  490             {
//  491               Data[2] = 0x01;
//  492               Data[3] = 0x14;
//  493               Data[4] = 0x01;
//  494               if(lux_warn_flag)
//  495                 HalUARTWrite(UART0, Data, 7);
//  496               lux_warn_flag=0;
//  497              }
//  498              // 光照低报警
//  499              
//  500              if( NodeData1[0]== 0x01 && NodeData1[3]==0x01&&!(lux_warn_flag))
//  501             {
//  502               Data[2] = 0x01;
//  503               Data[3] = 0x14;
//  504               Data[4] = 0x02;
//  505               HalUARTWrite(UART0, Data, 7);
//  506               lux_warn_flag=1;
//  507                break;
//  508             }
//  509             //光照低报警解除      
//  510             
//  511             if(NodeData2[0]== 0x02 && NodeData2[3] == 1)
//  512             {
//  513                Data[2] = 0x02;
//  514                Data[3] = 0x10;
//  515                Data[4] = 0x01;
//  516                if(pump_flag)
//  517                 HalUARTWrite(UART0, Data, 7);
//  518                pump_flag=0;
//  519                break;
//  520             }
//  521             if(NodeData1[0]== 0x01 && NodeData1[1] == 0&&!(pump_flag))
//  522             {
//  523                 pump_flag=1;
//  524             
//  525             }
//  526             //土壤湿度过低报警及解除                     
//  527                 
//  528                         
//  529              if(NodeData1[0]== 0x01 && NodeData1[6]>=0x1e)
//  530              {
//  531                Data[2] = 0x01;
//  532                Data[3] = 0x12;
//  533                Data[4] = 0x01;
//  534                if(high_flag)
//  535                 HalUARTWrite(UART0, Data, 7);
//  536                high_flag=0;//flag==0 the warnning has been taken place!
//  537              }
//  538              if(NodeData1[0]== 0x01 && NodeData1[6]==0x1d&&!(high_flag))
//  539              {
//  540                Data[2] = 0x01;
//  541                Data[3] = 0x12;
//  542                Data[4] = 0x02;
//  543                HalUARTWrite(UART0, Data, 7);
//  544                high_flag=1;
//  545                break;
//  546               } 
//  547               //温度高报警及解除
//  548                   
//  549           if(NodeData1[0]== 0x01 && NodeData1[6]<0x14 && NodeData1[6]!= 0x00)
//  550              {
//  551                Data[2] = 0x01;
//  552                Data[3] = 0x13;
//  553                Data[4] = 0x01;
//  554                if(low_flag)
//  555                   HalUARTWrite(UART0, Data, 7);
//  556                low_flag=0;
//  557               }
//  558               
//  559             if(NodeData1[0]== 0x01 && NodeData1[6]==0x15&&!(low_flag))
//  560              {
//  561                Data[2] = 0x01;
//  562                Data[3] = 0x13;
//  563                Data[4] = 0x02;            
//  564                HalUARTWrite(UART0, Data, 7);
//  565                low_flag=1;
//  566                break;
//  567              }
//  568              //温度低报警及解除
//  569               
//  570            if(NodeData1[0]== 0x01 && NodeData1[7]>=0x55)
//  571              {
//  572                Data[2] = 0x01;
//  573                Data[3] = 0x15;
//  574                Data[4] = 0x01;
//  575                if(shihigh_flag)
//  576                 HalUARTWrite(UART0, Data, 7);
//  577                shihigh_flag=0;//flag==0 the warnning has been taken place!
//  578              }
//  579              if(NodeData1[0]== 0x01 && NodeData1[7]==0x54&&!(shihigh_flag))
//  580              {
//  581                Data[2] = 0x01;
//  582                Data[3] = 0x15;
//  583                Data[4] = 0x02;
//  584                HalUARTWrite(UART0, Data, 7);
//  585                shihigh_flag=1;
//  586                break;
//  587               } 
//  588               //湿度高报警及解除
//  589                   
//  590           if(NodeData1[0]== 0x01 && NodeData1[7]<0x1e && NodeData1[7]!= 0x00)
//  591              {
//  592                Data[2] = 0x01;
//  593                Data[3] = 0x16;
//  594                Data[4] = 0x01;
//  595                if(shilow_flag)
//  596                   HalUARTWrite(UART0, Data, 7);
//  597                shilow_flag=0;
//  598               }
//  599               
//  600             if(NodeData1[0]== 0x01 && NodeData1[7]==0x16&&!(shilow_flag))
//  601              {
//  602                Data[2] = 0x01;
//  603                Data[3] = 0x16;
//  604                Data[4] = 0x02;            
//  605                HalUARTWrite(UART0, Data, 7);
//  606                shilow_flag=1;
//  607                break;
//  608              }
//  609              //湿度低报警及解除
//  610            */   
//  611               
//  612             }
//  613         #if UART_DEBUG
//  614             HalUARTWrite (UART0, NodeData, 4); //调试时通过串口输出
//  615             HalUARTWrite (UART0, "\n", 1);
//  616         #endif            
//  617            break;
//  618 #else  
//  619 		case 0xA5:  //开关灯设备          
//  620         if(afRxData[3] == 0x30 || afRxData[3] == 0x31 || afRxData[3] == 0x32 || afRxData[3] == 0x33 || afRxData[3] == 0x34 || afRxData[3] == 0x35) //控制终端          
//  621         {  
//  622 		if(afRxData[3] == 0x30 && afRxData[2] == 0x02 && EndDeviceID == 0x02)         
//  623         {  
//  624 				if(afRxData[4] == 0x01)
//  625                 {
//  626                      LED_PIN = 0;
//  627 				}
//  628 				if(afRxData[4] == 0x02)
//  629                 {
//  630                      LED_PIN = 1;
//  631 				}			
//  632         }		
//  633         
//  634          if(afRxData[3] == 0x31 && afRxData[2] == 0x03 && EndDeviceID == 0x03)         
//  635         {  
//  636 				if(afRxData[4] == 0x01)
//  637                 {
//  638                     heat_PIN = 0;
//  639 					}
//  640 				if(afRxData[4] == 0x02)
//  641                 {
//  642                    heat_PIN = 1;
//  643 				}
//  644         }	
//  645         
//  646          if(afRxData[3] == 0x32  && afRxData[2] == 0x02 && EndDeviceID == 0x02)         
//  647         {  
//  648 				if(afRxData[4] == 0x01)
//  649                 {
//  650                     Bfan_PIN = 1;
//  651 				}
//  652 				if(afRxData[4] == 0x02)
//  653                 {
//  654                     Bfan_PIN = 0;
//  655 				}
//  656         }	
//  657         
//  658          if(afRxData[3] == 0x33 && afRxData[2] == 0x03 && EndDeviceID == 0x03)         
//  659         {  
//  660 				if(afRxData[4] == 0x01)
//  661                 {
//  662                     Sfan_PIN = 0;
//  663 				}
//  664 				if(afRxData[4] == 0x02)
//  665                 {
//  666                     Sfan_PIN = 1;
//  667 				}
//  668 		}	
//  669         
//  670          if(afRxData[3] == 0x34 && afRxData[2] == 0x03 && EndDeviceID == 0x03)         
//  671         {  
//  672 				if(afRxData[4] == 0x01)
//  673                 {
//  674                     DRIP_PIN = 0;
//  675 					}
//  676 				if(afRxData[4] == 0x02)
//  677                 {
//  678                     DRIP_PIN = 1;
//  679 				}
//  680 		}	
//  681         
//  682          if(afRxData[3] == 0x35 && afRxData[2] == 0x03 && EndDeviceID == 0x03)         
//  683         {  
//  684 				if(afRxData[4] == 0x01)
//  685                 {
//  686                      DAMP_PIN = 0;
//  687 				}
//  688 				if(afRxData[4] == 0x02)
//  689                 {
//  690                     DAMP_PIN = 1;
//  691 				}
//  692 		}	
//  693 			
//  694 			break;
//  695         }		
//  696 #endif
//  697         default :
//  698             break;
//  699         }
//  700         break;
//  701 		// A response to a received serial data block.
//  702 		case SERIALAPP_CLUSTERID2:
//  703 			if ((pkt->cmd.Data[1] == SerialApp_TxSeq) &&
//  704 				((pkt->cmd.Data[0] == OTA_SUCCESS) || (pkt->cmd.Data[0] == OTA_DUP_MSG)))
??SerialApp_ProcessMSGCmd_2:
        MOV     A,R2
        ADD     A,#0x21
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPTR,#SerialApp_TxSeq
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??SerialApp_ProcessMSGCmd_5
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        MOVX    A,@DPTR
        JZ      ??SerialApp_ProcessMSGCmd_6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R2
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SerialApp_ProcessMSGCmd_5
//  705 			{
//  706 				SerialApp_TxLen = 0;
??SerialApp_ProcessMSGCmd_6:
        MOV     DPTR,#SerialApp_TxLen
        CLR     A
        MOVX    @DPTR,A
//  707 				osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_EVT);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,A
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
        SJMP    ??SerialApp_ProcessMSGCmd_0
//  708 			}
//  709 			else
//  710 			{
//  711 				// Re-start timeout according to delay sent from other device.
//  712 				delay = BUILD_UINT16( pkt->cmd.Data[2], pkt->cmd.Data[3] );
//  713 				osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_EVT, delay );
??SerialApp_ProcessMSGCmd_5:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  714 			}
//  715 			break;
//  716 			
//  717 		default:
//  718 			break;
//  719 	}
//  720 }
??SerialApp_ProcessMSGCmd_0:
        MOV     A,#0x1e
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  721 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  722 uint8 TxBuffer[128];
TxBuffer:
        DS 128
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  723 uint8 Data[10];
`Data`:
        DS 10
        REQUIRE __INIT_XDATA_Z

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  724 uint8 SendData(uint8 AD,uint8 TP)
SendData:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function SendData
        CODE
//  725 {
        FUNCALL SendData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SendData, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  726 	//uint8 ret; //, i, index=4;
//  727 
//  728 	TxBuffer[0] = 0xA5;
        MOV     DPTR,#TxBuffer
        MOV     A,#-0x5b
        MOVX    @DPTR,A
//  729 	TxBuffer[1] = 0x07;
        INC     DPTR
        MOV     A,#0x7
        MOVX    @DPTR,A
//  730 	//TxBuffer[2] = addr;
//  731 	//TxBuffer[2] = TP;
//  732         
//  733         Data[0] = 0xA5;
        MOV     DPTR,#`Data`
        MOV     A,#-0x5b
        MOVX    @DPTR,A
//  734         Data[1] = 0x07;
        INC     DPTR
        MOV     A,#0x7
        MOVX    @DPTR,A
//  735         Data[5] = 0x0D;
        MOV     DPTR,#`Data` + 5
        MOV     A,#0xd
        MOVX    @DPTR,A
//  736         Data[6] = 0x0A;
        INC     DPTR
        MOV     A,#0xa
        MOVX    @DPTR,A
//  737         
//  738 
//  739 	/*switch(TP)
//  740 	{
//  741 	
//  742         case 0x20:
//  743          
//  744           TxBuffer[2] = 0x01;
//  745           TxBuffer[3] = NodeData[1];
//  746           TxBuffer[4] = 0x0D;
//  747           TxBuffer[5] = 0x0A;
//  748           HalUARTWrite(UART0, TxBuffer, 6);
//  749           ret = 1;
//  750 		break;
//  751         case 0x80:
//  752           TxBuffer[2] = 0x01;
//  753           TxBuffer[3] = NodeData[0];
//  754           TxBuffer[4] = 0x0D;
//  755           TxBuffer[5] = 0x0A;
//  756           
//  757           HalUARTWrite(UART0, TxBuffer, 6);
//  758           ret = 1;
//  759           
//  760           
//  761 	default:
//  762         ret = 0;
//  763 		break;
//  764 	}*/
//  765         if(AD == 0X01 && TP == 0x22)
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??SendData_0
        MOV     A,#0x22
        XRL     A,R7
        JNZ     ??SendData_0
//  766         {
//  767             TxBuffer[1] = 0x0B;                
        MOV     DPTR,#TxBuffer + 1
        MOV     A,#0xb
        MOVX    @DPTR,A
//  768             TxBuffer[2] = NodeData1[0];
        MOV     DPTR,#NodeData1
        MOVX    A,@DPTR
        MOV     DPTR,#TxBuffer + 2
        MOVX    @DPTR,A
//  769             TxBuffer[3] = 0x03;
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
//  770             TxBuffer[4] = NodeData1[1];
        MOV     DPTR,#NodeData1 + 1
        MOVX    A,@DPTR
        MOV     DPTR,#TxBuffer + 4
        MOVX    @DPTR,A
//  771             TxBuffer[5] = NodeData1[2];
        MOV     DPTR,#NodeData1 + 2
        MOVX    A,@DPTR
        MOV     DPTR,#TxBuffer + 5
        MOVX    @DPTR,A
//  772             TxBuffer[6] = NodeData1[3];
        MOV     DPTR,#NodeData1 + 3
        MOVX    A,@DPTR
        MOV     DPTR,#TxBuffer + 6
        MOVX    @DPTR,A
//  773             TxBuffer[7] = NodeData1[4];
        MOV     DPTR,#NodeData1 + 4
        MOVX    A,@DPTR
        MOV     DPTR,#TxBuffer + 7
        MOVX    @DPTR,A
//  774             TxBuffer[8] = NodeData1[5];
        MOV     DPTR,#NodeData1 + 5
        MOVX    A,@DPTR
        MOV     DPTR,#TxBuffer + 8
        MOVX    @DPTR,A
//  775             TxBuffer[9] = 0x0D;
        INC     DPTR
        MOV     A,#0xd
        MOVX    @DPTR,A
//  776             TxBuffer[10] = 0x0A;
        INC     DPTR
        MOV     A,#0xa
        MOVX    @DPTR,A
//  777                 
//  778             HalUARTWrite(UART0, TxBuffer, 11);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xb
        MOV     R5,#0x0
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  779         }
//  780         
//  781         if(AD == 0X01 && TP == 0x20)
??SendData_0:
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??SendData_1
        MOV     A,#0x20
        XRL     A,R7
        JNZ     ??SendData_1
//  782           {
//  783              
//  784           
//  785                 TxBuffer[2] = NodeData1[0];
        MOV     DPTR,#NodeData1
        MOVX    A,@DPTR
        MOV     DPTR,#TxBuffer + 2
        MOVX    @DPTR,A
//  786                 TxBuffer[3] = 0x01;
        INC     DPTR
        MOV     A,#0x1
        MOVX    @DPTR,A
//  787                 TxBuffer[4] = NodeData1[6];
        MOV     DPTR,#NodeData1 + 6
        MOVX    A,@DPTR
        MOV     DPTR,#TxBuffer + 4
        MOVX    @DPTR,A
//  788                 TxBuffer[5] = 0x0D;
        INC     DPTR
        MOV     A,#0xd
        MOVX    @DPTR,A
//  789                 TxBuffer[6] = 0x0A;
        INC     DPTR
        MOV     A,#0xa
        MOVX    @DPTR,A
//  790                 HalUARTWrite(UART0, TxBuffer, 7);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  791                 //ret = 1;
//  792                      
//  793           }
//  794         
//  795         if(AD == 0X01 && TP == 0x21)
??SendData_1:
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??SendData_2
        MOV     A,#0x21
        XRL     A,R7
        JNZ     ??SendData_2
//  796            {
//  797                 TxBuffer[2] = NodeData1[0];
        MOV     DPTR,#NodeData1
        MOVX    A,@DPTR
        MOV     DPTR,#TxBuffer + 2
        MOVX    @DPTR,A
//  798                 TxBuffer[3] = 0x02;
        INC     DPTR
        MOV     A,#0x2
        MOVX    @DPTR,A
//  799                 TxBuffer[4] = NodeData1[7];
        MOV     DPTR,#NodeData1 + 7
        MOVX    A,@DPTR
        MOV     DPTR,#TxBuffer + 4
        MOVX    @DPTR,A
//  800                 TxBuffer[5] = 0x0D;
        INC     DPTR
        MOV     A,#0xd
        MOVX    @DPTR,A
//  801                 TxBuffer[6] = 0x0A;
        INC     DPTR
        MOV     A,#0xa
        MOVX    @DPTR,A
//  802                 HalUARTWrite(UART0, TxBuffer, 7);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  803                 //ret = 1;
//  804             }
//  805         
//  806 
//  807         
//  808         
//  809 
//  810     return 0;
??SendData_2:
        MOV     R1,#0x0
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock4
//  811 }
//  812 
//  813 /*********************************************************************
//  814 * @fn      SerialApp_Send
//  815 *
//  816 * @brief   Send data OTA.
//  817 *
//  818 * @param   none
//  819 *
//  820 * @return  none
//  821 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  822 static void SerialApp_Send(void)
SerialApp_Send:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function SerialApp_Send
        CODE
//  823 {
        FUNCALL SerialApp_Send, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Send, SendData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
//  824     uint8  TP;
//  825     uint8  AD;
//  826     uint8 data[10];
//  827     data[0] = 0xA5;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#-0x5b
        MOVX    @DPTR,A
//  828     data[1] = 0x07;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x7
        MOVX    @DPTR,A
//  829     data[5] = 0x0D;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xd
        MOVX    @DPTR,A
//  830     data[6] = 0x0A;
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
//  831     
//  832     //uint8 checksum=0;
//  833 	
//  834 #if SERIAL_APP_LOOPBACK
//  835 	if (SerialApp_TxLen < SERIAL_APP_TX_MAX)
//  836 	{
//  837 		SerialApp_TxLen += HalUARTRead(SERIAL_APP_PORT, SerialApp_TxBuf+SerialApp_TxLen+1,
//  838 			SERIAL_APP_TX_MAX-SerialApp_TxLen);
//  839 	}
//  840 	
//  841 	if (SerialApp_TxLen)
//  842 	{
//  843 		(void)SerialApp_TxAddr;
//  844 		if (HalUARTWrite(SERIAL_APP_PORT, SerialApp_TxBuf+1, SerialApp_TxLen))
//  845 		{
//  846 			SerialApp_TxLen = 0;
//  847 		}
//  848 		else
//  849 		{
//  850 			osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
//  851 		}
//  852 	}
//  853 #else
//  854 	if (!SerialApp_TxLen && 
//  855 		(SerialApp_TxLen = HalUARTRead(UART0, SerialApp_TxBuf, SERIAL_APP_TX_MAX)))
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
        ; Setup parameters for call to function HalUARTRead
        MOV     R4,#0x14
        MOV     R5,#0x0
        MOV     R2,#SerialApp_TxBuf & 0xff
        MOV     R3,#(SerialApp_TxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     A,R2
        MOV     DPTR,#SerialApp_TxLen
        MOVX    @DPTR,A
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  856 	{
//  857         if (SerialApp_TxLen)
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  858         {
//  859             SerialApp_TxLen = 0;
        CLR     A
        MOVX    @DPTR,A
//  860             if(SerialApp_TxBuf[0] == 0xA5)
        MOV     DPTR,#SerialApp_TxBuf
        MOVX    A,@DPTR
        XRL     A,#0xa5
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  861             {
//  862 				//addr = SerialApp_TxBuf[2];
//  863 		      AD = SerialApp_TxBuf[2];	
        MOV     DPTR,#SerialApp_TxBuf + 2
        MOVX    A,@DPTR
        MOV     R1,A
//  864                       TP = SerialApp_TxBuf[3];
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  865                 //len = GetDataLen(TP); 
//  866                 //len += 4;
//  867                 //checksum = XorCheckSum(SerialApp_TxBuf, len);
//  868                 
//  869 				//接收数据正确返回相应数据
//  870                 //if(checksum == SerialApp_TxBuf[len] && SerialApp_TxBuf[len+1] == 0x23)
//  871                 //{
//  872                     if(TP == 0x30 || TP == 0x31 || TP == 0x32 || TP == 0x33 || TP == 0x34 || TP == 0x35) //控制终端
        MOV     A,#0x30
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0x31
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0x32
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0x33
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0x34
        XRL     A,R6
        JZ      ??SerialApp_Send_1
        MOV     A,#0x35
        XRL     A,R6
        JZ      $+5
        LJMP    ??SerialApp_Send_2 & 0xFFFF
//  873                     {                            
//  874                         if (afStatus_SUCCESS == AF_DataRequest(&Broadcast_DstAddr,
//  875                                                 (endPointDesc_t *)&SerialApp_epDesc,
//  876                                                 SERIALAPP_CLUSTERID,
//  877                                                 7, 
//  878                                                 SerialApp_TxBuf,
//  879                                                 &SerialApp_MsgID,
//  880                                                 0,
//  881                                                 AF_DEFAULT_RADIUS))
??SerialApp_Send_1:
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 0,#SerialApp_TxBuf & 0xff
        MOV     ?V0 + 1,#(SerialApp_TxBuf >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,#0x7
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#Broadcast_DstAddr & 0xff
        MOV     R3,#(Broadcast_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R1
        JZ      $+5
        LJMP    ??SerialApp_Send_0 & 0xFFFF
//  882                         {
//  883                            if(TP == 0x30) //如果开启自动刷新则不需要这步操作
        MOV     A,#0x30
        XRL     A,R6
        JNZ     ??SerialApp_Send_3
//  884                                 //NodeData[3] = SerialApp_TxBuf[3];  //更新缓冲区灯的状态
//  885                             {   data[2] = 0x02;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  886                                 data[3] = 0x50;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x50
        MOVX    @DPTR,A
//  887                                 data[4] = SerialApp_TxBuf[4];
        MOV     DPTR,#SerialApp_TxBuf + 4
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  888                             MicroWait (5000); 
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   ??Onboard_wait?relay
//  889 
//  890                             HalUARTWrite(UART0, data, 7); //无线发送成功后原样返回给上位机	
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  891                             //osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
//  892                             }
//  893                             
//  894                             if(TP == 0x31) //如果开启自动刷新则不需要这步操作
??SerialApp_Send_3:
        MOV     A,#0x31
        XRL     A,R6
        JNZ     ??SerialApp_Send_4
//  895                                 //NodeData[3] = SerialApp_TxBuf[3];  //更新缓冲区灯的状态
//  896                             {   data[2] = 0x03;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  897                                 data[3] = 0x51;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x51
        MOVX    @DPTR,A
//  898                                 data[4] = SerialApp_TxBuf[4];
        MOV     DPTR,#SerialApp_TxBuf + 4
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  899                              MicroWait (5000); 
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   ??Onboard_wait?relay
//  900  
//  901                             HalUARTWrite(UART0, data, 7); //无线发送成功后原样返回给上位机	
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  902                             //osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
//  903                             }
//  904                             
//  905                             if(TP == 0x32) //如果开启自动刷新则不需要这步操作
??SerialApp_Send_4:
        MOV     A,#0x32
        XRL     A,R6
        JNZ     ??SerialApp_Send_5
//  906                                 //NodeData[3] = SerialApp_TxBuf[3];  //更新缓冲区灯的状态
//  907                             {data[2] = 0x02;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  908                                 data[3] = 0x52;
        INC     A
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x52
        MOVX    @DPTR,A
//  909                                 data[4] = SerialApp_TxBuf[4];
        MOV     DPTR,#SerialApp_TxBuf + 4
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  910                              MicroWait (5000); 
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   ??Onboard_wait?relay
//  911  
//  912                             HalUARTWrite(UART0, data, 7); //无线发送成功后原样返回给上位机	
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  913                             //osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
//  914                             }
//  915                             
//  916                             if(TP == 0x33) //如果开启自动刷新则不需要这步操作
??SerialApp_Send_5:
        MOV     A,#0x33
        XRL     A,R6
        JNZ     ??SerialApp_Send_6
//  917                                 //NodeData[3] = SerialApp_TxBuf[3];  //更新缓冲区灯的状态
//  918                             {data[2] = 0x03;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  919                                 data[3] = 0x53;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x53
        MOVX    @DPTR,A
//  920                                 data[4] = SerialApp_TxBuf[4];
        MOV     DPTR,#SerialApp_TxBuf + 4
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  921                               MicroWait (5000); 
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   ??Onboard_wait?relay
//  922 
//  923                             HalUARTWrite(UART0, data, 7); //无线发送成功后原样返回给上位机	
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  924                             //osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
//  925                             }
//  926                             
//  927                             if(TP == 0x34) //如果开启自动刷新则不需要这步操作
??SerialApp_Send_6:
        MOV     A,#0x34
        XRL     A,R6
        JNZ     ??SerialApp_Send_7
//  928                                 //NodeData[3] = SerialApp_TxBuf[3];  //更新缓冲区灯的状态
//  929                             {data[2] = 0x03;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  930                                 data[3] = 0x54;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x54
        MOVX    @DPTR,A
//  931                                 data[4] = SerialApp_TxBuf[4];
        MOV     DPTR,#SerialApp_TxBuf + 4
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  932                               MicroWait (5000); 
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   ??Onboard_wait?relay
//  933 
//  934                             HalUARTWrite(UART0, data, 7); //无线发送成功后原样返回给上位机	
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  935                             //osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
//  936                             }
//  937                             
//  938                             if(TP == 0x35) //如果开启自动刷新则不需要这步操作
??SerialApp_Send_7:
        MOV     A,#0x35
        XRL     A,R6
        JNZ     ??SerialApp_Send_0
//  939                                 //NodeData[3] = SerialApp_TxBuf[3];  //更新缓冲区灯的状态
//  940                             {data[2] = 0x03;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x3
        MOVX    @DPTR,A
//  941                                 data[3] = 0x55;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x55
        MOVX    @DPTR,A
//  942                                 data[4] = SerialApp_TxBuf[4];
        MOV     DPTR,#SerialApp_TxBuf + 4
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  943                               MicroWait (5000); 
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x78
        MOV     R3,#0x13
        LCALL   ??Onboard_wait?relay
//  944 
//  945                            HalUARTWrite(UART0, data, 7); //无线发送成功后原样返回给上位机	
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x7
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
        SJMP    ??SerialApp_Send_0
//  946                             //osal_set_event(SerialApp_TaskID, SERIALAPP_SEND_EVT);
//  947                             }  
//  948                         }
//  949                         else  //暂时没发现错误，关闭终端发送也正常。无线发送失败后将数据位和校验位置0返给上位机	
//  950                         {
//  951                             /*SerialApp_TxBuf[len-1] = 0x00;
//  952                             SerialApp_TxBuf[len] = 0x00;
//  953                             HalUARTWrite(UART0, SerialApp_TxBuf, len+2);*/
//  954                         }
//  955                     }
//  956                     else
//  957                     {
//  958 					    SendData(AD,TP);   //查询操作
??SerialApp_Send_2:
        ; Setup parameters for call to function SendData
        MOV     A,R6
        MOV     R2,A
        LCALL   ??SendData?relay
//  959                     }
//  960 				//}
//  961 			}
//  962 		}
//  963     }
//  964 #endif
//  965 }
??SerialApp_Send_0:
        MOV     A,#0xa
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  966 
//  967 /*********************************************************************
//  968 * @fn      SerialApp_Resp
//  969 *
//  970 * @brief   Send data OTA.
//  971 *
//  972 * @param   none
//  973 *
//  974 * @return  none
//  975 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  976 static void SerialApp_Resp(void)
SerialApp_Resp:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function SerialApp_Resp
        CODE
//  977 {
        FUNCALL SerialApp_Resp, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Resp, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  978 	if (afStatus_SUCCESS != AF_DataRequest(&SerialApp_RxAddr,
//  979 		(endPointDesc_t *)&SerialApp_epDesc,
//  980 		SERIALAPP_CLUSTERID2,
//  981 		SERIAL_APP_RSP_CNT, SerialApp_RspBuf,
//  982 		&SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#SerialApp_RspBuf & 0xff
        MOV     ?V0 + 1,#(SerialApp_RspBuf >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_RxAddr & 0xff
        MOV     R3,#(SerialApp_RxAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        JZ      ??SerialApp_Resp_0
//  983 	{
//  984 		osal_set_event(SerialApp_TaskID, SERIALAPP_RESP_EVT);
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  985 	}
//  986 }
??SerialApp_Resp_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock6
//  987 
//  988 /*********************************************************************
//  989 * @fn      SerialApp_CallBack
//  990 *
//  991 * @brief   Send data OTA.
//  992 *
//  993 * @param   port - UART port.
//  994 * @param   event - the UART port event flag.
//  995 *
//  996 * @return  none
//  997 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  998 static void SerialApp_CallBack(uint8 port, uint8 event)
SerialApp_CallBack:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function SerialApp_CallBack
        CODE
//  999 {
        FUNCALL SerialApp_CallBack, SerialApp_Send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
// 1000 	(void)port;
// 1001 	
// 1002 	if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
// 1003 #if SERIAL_APP_LOOPBACK
// 1004 		(SerialApp_TxLen < SERIAL_APP_TX_MAX))
// 1005 #else
// 1006 		!SerialApp_TxLen)
        MOV     A,#0x7
        ANL     A,R6
        JZ      ??SerialApp_CallBack_0
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JNZ     ??SerialApp_CallBack_0
// 1007 #endif
// 1008 	{
// 1009 		SerialApp_Send();
        ; Setup parameters for call to function SerialApp_Send
        LCALL   ??SerialApp_Send?relay
// 1010 	}
// 1011 }
??SerialApp_CallBack_0:
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock7
// 1012 
// 1013 
// 1014 //------------------------------------------------------------------------------------------------------------------------------------------
// 1015 //查询单个终端上所有传感器的数据 3A 00 01 02 XX 23  响应：3A 00 01 02 00 00 00 00 xor 23

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1016 void SerialApp_SendPeriodicMessage( void )
SerialApp_SendPeriodicMessage:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function SerialApp_SendPeriodicMessage
        CODE
// 1017 {
        FUNCALL SerialApp_SendPeriodicMessage, DHT11
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, GetHUM
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, GetDRIP
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, B_LUX_GetLux
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, GetLED
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, GetBfan
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, GetSfan
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, Getheat
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, GetDAMP
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 78, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 78, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 87, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 87, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 62
        MOV     A,#-0x3e
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 78)
// 1018     uint8 SendBuf[20]={0};
        MOV     DPTR,#`?<Constant {0}>_1`
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x14
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1019     unsigned long int sun=0;
// 1020     unsigned char lux[5];
// 1021     char strTemp[16]="Temperature: ";
        MOV     DPTR,#`?<Constant "Temperature: ">`
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0x10
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1022     char strHumidity[13]="Humidity: ";
        MOV     DPTR,#`?<Constant "Humidity: ">`
        PUSH    DPL
        CFI CFA_SP SP+-1
        PUSH    DPH
        CFI CFA_SP SP+-2
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        POP     DPH
        CFI CFA_SP SP+-1
        POP     DPL
        CFI CFA_SP SP+0
        MOV     A,#0xd
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1023     char strLUX[16]="Lux: ";
// 1024     char strLEDon[10]="LED: ON";
// 1025     char strLEDoff[10]="LED: OFF";
// 1026     char SD_shi,SD_ge,WD_shi,WD_ge=4;
// 1027     //unsigned long int sunbuf[1];
// 1028     SendBuf[0] = 0xA5;                          
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x5b
        MOVX    @DPTR,A
// 1029     SendBuf[1] = 0x07;
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x7
        MOVX    @DPTR,A
// 1030     SendBuf[2] = 0x0A;
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        MOVX    @DPTR,A
// 1031     DHT11(); 
        ; Setup parameters for call to function DHT11
        LCALL   ??DHT11?relay
// 1032     SendBuf[3] = EndDeviceID;  
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1033     SendBuf[4] = GetHUM();  
        ; Setup parameters for call to function GetHUM
        LCALL   ??GetHUM?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1034     SendBuf[5] = GetDRIP();
        ; Setup parameters for call to function GetDRIP
        LCALL   ??GetDRIP?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1035     
// 1036     
// 1037     void B_LUX_Init();
// 1038     sun=B_LUX_GetLux();
        ; Setup parameters for call to function B_LUX_GetLux
        LCALL   ??B_LUX_GetLux?relay
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?XSTORE_R2345
// 1039     
// 1040     lux[0]=(sun/10000);
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_2710
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
// 1041     lux[1]=((sun%10000)/1000);
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_2710
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
// 1042     lux[2]=(((sun%10000)%1000)/100);
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_64
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
// 1043     lux[3]=((((sun%10000)%1000)%100)/10);
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_64
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_TO_X
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?UL_DIV_MOD
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
// 1044     lux[4]=((((sun%10000)%1000)%100)%10);
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_a
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
// 1045      
// 1046     SendBuf[6] = lux[0];    
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1047     SendBuf[7] = lux[1]; 
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1048     SendBuf[8] = lux[2];
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x15
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1049     SendBuf[9] = lux[3];
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1050     SendBuf[10] = lux[4];
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1051     SendBuf[11] = GetLED();  
        ; Setup parameters for call to function GetLED
        LCALL   ??GetLED?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1052     SendBuf[12] = GetBfan();  
        ; Setup parameters for call to function GetBfan
        LCALL   ??GetBfan?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1053     SendBuf[13] = wendu;   
        MOV     DPTR,#wendu
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1054     SendBuf[14] = shidu;
        MOV     DPTR,#shidu
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1055     SendBuf[15] = GetSfan();  
        ; Setup parameters for call to function GetSfan
        LCALL   ??GetSfan?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1056     SendBuf[16] = Getheat();  
        ; Setup parameters for call to function Getheat
        LCALL   ??Getheat?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1057     SendBuf[17] = GetDAMP();
        ; Setup parameters for call to function GetDAMP
        LCALL   ??GetDAMP?relay
        MOV     A,R1
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1058 
// 1059     //温湿度值转换十进制 并显示
// 1060     WD_shi=wendu/10; 
// 1061     WD_ge=wendu%10;        
// 1062     SD_shi=shidu/10; 
// 1063     SD_ge=shidu%10;     
// 1064     strTemp[13]=WD_shi+0x30;
        MOV     B,#0xa
        MOV     DPTR,#wendu
        MOVX    A,@DPTR
        DIV     AB
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3b
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1065     strTemp[14]=WD_ge+0x30;
        MOV     DPTR,#wendu
        MOVX    A,@DPTR
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x3c
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1066     strHumidity[10]=SD_shi+0x30;
        MOV     B,#0xa
        MOV     DPTR,#shidu
        MOVX    A,@DPTR
        DIV     AB
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2b
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1067     strHumidity[11]=SD_ge+0x30;
        MOV     DPTR,#shidu
        MOVX    A,@DPTR
        MOV     B,#0xa
        DIV     AB
        MOV     A,B
        ADD     A,#0x30
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,#0x2c
        LCALL   ?XSTACK_DISP0_8
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1068     
// 1069     HalLcdWriteString(strTemp,HAL_LCD_LINE_3);//温度显示
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     A,#0x2e
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
// 1070     HalLcdWriteString(strHumidity,HAL_LCD_LINE_4);//湿度显示
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x4
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalLcdWriteString?relay
// 1071     
// 1072     
// 1073     //光照强度显示
// 1074     strLUX[5]=(sun/10000)+0x30;
// 1075     strLUX[6]=((sun%10000)/1000)+0x30;
// 1076     strLUX[7]=(((sun%10000)%1000)/100)+0x30;
// 1077     strLUX[8]=((((sun%10000)%1000)%100)/10)+0x30;
// 1078     strLUX[9]=((((sun%10000)%1000)%100)%10)+0x30;
// 1079        
// 1080     //HalLcdWriteString(strLUX,HAL_LCD_LINE_3);//光照强度显示
// 1081     
// 1082    // HalUARTWrite(0, (uint8 *)lux,5);//串口输出光照强度值
// 1083     
// 1084     
// 1085     
// 1086     //led工作状态 显示
// 1087     /*
// 1088     if (SendBuf[11]==0)
// 1089     {
// 1090       HalLcdWriteString(strLEDon,HAL_LCD_LINE_3); 
// 1091     }
// 1092     else
// 1093     {
// 1094       HalLcdWriteString(strLEDoff,HAL_LCD_LINE_3);
// 1095     }
// 1096     */
// 1097         
// 1098     
// 1099     SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#SerialApp_TxAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1100     SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
// 1101     SerialApp_TxAddr.addr.shortAddr = 0x00;  
        MOV     DPTR,#SerialApp_TxAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1102     if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
// 1103                SERIALAPP_CLUSTERID,
// 1104                20,
// 1105                SendBuf,
// 1106                &SerialApp_MsgID, 
// 1107                0, 
// 1108                AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 79)
        MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 81)
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 83)
        MOV     ?V0 + 0,#0x14
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 85)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 87)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#SerialApp_TxAddr & 0xff
        MOV     R3,#(SerialApp_TxAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 78)
// 1109     {
// 1110     // Successfully requested to be sent.
// 1111     }
// 1112     else
// 1113     {
// 1114     // Error occurred in request to send.
// 1115     }
// 1116 }
        MOV     A,#0x3e
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock8
// 1117 
// 1118 
// 1119 
// 1120 //通过串口输出短地址 IEEE
// 1121 /*void PrintAddrInfo(uint16 shortAddr, uint8 *pIeeeAddr)
// 1122 {
// 1123     uint8 strIeeeAddr[17] = {0};
// 1124     char  buff[30] = {0};    
// 1125     
// 1126     //获得短地址   
// 1127     sprintf(buff, "shortAddr:%04X   IEEE:", shortAddr);  
// 1128  
// 1129     //获得IEEE地址
// 1130     GetIeeeAddr(pIeeeAddr, strIeeeAddr);
// 1131 
// 1132     HalUARTWrite (UART0, (uint8 *)buff, strlen(buff));
// 1133     Delay_ms(10);
// 1134     HalUARTWrite (UART0, strIeeeAddr, 16); 
// 1135     HalUARTWrite (UART0, "\n", 1);
// 1136 }
// 1137 */
// 1138 /*void AfSendAddrInfo(void)
// 1139 {
// 1140     uint16 shortAddr;
// 1141     uint8 strBuf[11]={0};  
// 1142     
// 1143     SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
// 1144     SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
// 1145     SerialApp_TxAddr.addr.shortAddr = 0x00;   
// 1146     
// 1147     shortAddr=NLME_GetShortAddr();
// 1148     
// 1149     strBuf[0] = 0x3B;                          //发送地址给协调器 可用于点播
// 1150     strBuf[1] = HI_UINT16( shortAddr );        //存放短地址高8位
// 1151     strBuf[2] = LO_UINT16( shortAddr );        //存放短地址低8位
// 1152     
// 1153     osal_memcpy(&strBuf[3], NLME_GetExtAddr(), 8);
// 1154         
// 1155    if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
// 1156                        SERIALAPP_CLUSTERID,
// 1157                        11,
// 1158                        strBuf,
// 1159                        &SerialApp_MsgID, 
// 1160                        0, 
// 1161                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
// 1162   {
// 1163   }
// 1164   else
// 1165   {
// 1166     // Error occurred in request to send.
// 1167   }   
// 1168 }
// 1169 */
// 1170 /*void GetIeeeAddr(uint8 * pIeeeAddr, uint8 *pStr)
// 1171 {
// 1172   uint8 i;
// 1173   uint8 *xad = pIeeeAddr;
// 1174 
// 1175   for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
// 1176   {
// 1177     uint8 ch;
// 1178     ch = (*xad >> 4) & 0x0F;
// 1179     *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
// 1180     i++;
// 1181     ch = *xad & 0x0F;
// 1182     *pStr++ = ch + (( ch < 10 ) ? '0' : '7');
// 1183     i++;
// 1184   }
// 1185 }
// 1186 */
// 1187 /*uint8 XorCheckSum(uint8 * pBuf, uint8 len)
// 1188 {
// 1189 	uint8 i;
// 1190 	uint8 byRet=0;
// 1191 
// 1192 	if(len == 0)
// 1193 		return byRet;
// 1194 	else
// 1195 		byRet = pBuf[0];
// 1196 
// 1197 	for(i = 1; i < len; i ++)
// 1198 		byRet = byRet ^ pBuf[i];
// 1199 
// 1200 	return byRet;
// 1201 }
// 1202 */
// 1203 /*uint8 GetDataLen(uint8 fc)
// 1204 {
// 1205     uint8 len=0;
// 1206     switch(fc)
// 1207     {
// 1208     case 0x0A:
// 1209     case 0x0B:
// 1210     case 0x0C:
// 1211     case 0x0D:
// 1212       len = 1;
// 1213       break;
// 1214     }
// 1215     
// 1216     return len;
// 1217 }
// 1218 */
// 1219 
// 1220 //获得P0_4 继电器引脚的电平
// 1221 /*uint8 GetLamp( void )
// 1222 {
// 1223   uint8 ret;
// 1224   
// 1225   if(LAMP_PIN == 0)
// 1226     ret = 0;
// 1227   else
// 1228     ret = 1;
// 1229   
// 1230   return ret;
// 1231 }
// 1232 
// 1233 //获得P0_5 MQ-2气体传感器的数据
// 1234 uint8 GetGas( void )
// 1235 {
// 1236   uint8 ret;
// 1237   
// 1238   if(GAS_PIN == 0)
// 1239     ret = 0;
// 1240   else
// 1241     ret = 1;
// 1242   
// 1243   return ret;
// 1244 }*/
// 1245 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1246 uint8 GetHUM( void )
GetHUM:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function GetHUM
        CODE
// 1247 {
        ; Saved register size: 0
        ; Auto size: 0
// 1248   uint8 ret;
// 1249   
// 1250   if(HUM_PIN == 0)
// 1251     ret = 0;
        MOV     C,0x90.1
        CLR     A
        RLC     A
        MOV     R1,A
// 1252   else
// 1253     ret = 1;
// 1254   
// 1255   return ret;
        LJMP    ?BRET
        CFI EndBlock cfiBlock9
        REQUIRE _A_P1
// 1256 }
// 1257 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1258 uint8 GetDRIP( void )
GetDRIP:
        CFI Block cfiBlock10 Using cfiCommon0
        CFI Function GetDRIP
        CODE
// 1259 {
        ; Saved register size: 0
        ; Auto size: 0
// 1260   uint8 ret;
// 1261   
// 1262   if(DRIP_PIN == 0)
// 1263     ret = 0;
        MOV     C,0x80.5
        CLR     A
        RLC     A
        MOV     R1,A
// 1264   else
// 1265     ret = 1;
// 1266   
// 1267   return ret;
        LJMP    ?BRET
        CFI EndBlock cfiBlock10
        REQUIRE _A_P0
// 1268 }
// 1269 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1270 uint8 GetLED( void )
GetLED:
        CFI Block cfiBlock11 Using cfiCommon0
        CFI Function GetLED
        CODE
// 1271 {
        ; Saved register size: 0
        ; Auto size: 0
// 1272   uint8 ret;
// 1273   
// 1274   if(LED_PIN == 0)
// 1275     ret = 0;
        MOV     C,0x80.0
        CLR     A
        RLC     A
        MOV     R1,A
// 1276   else
// 1277     ret = 1;
// 1278   
// 1279   return ret;
        LJMP    ?BRET
        CFI EndBlock cfiBlock11
        REQUIRE _A_P0
// 1280 }
// 1281 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1282 uint8 Getheat( void )
Getheat:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function Getheat
        CODE
// 1283 {
        ; Saved register size: 0
        ; Auto size: 0
// 1284   uint8 ret;
// 1285   
// 1286   if(heat_PIN == 0)
// 1287     ret = 0;
        MOV     C,0x90.0
        CLR     A
        RLC     A
        MOV     R1,A
// 1288   else
// 1289     ret = 1;
// 1290   
// 1291   return ret;
        LJMP    ?BRET
        CFI EndBlock cfiBlock12
        REQUIRE _A_P1
// 1292 }
// 1293 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1294 uint8 GetDAMP( void )
GetDAMP:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function GetDAMP
        CODE
// 1295 {
        ; Saved register size: 0
        ; Auto size: 0
// 1296   uint8 ret;
// 1297   
// 1298   if(DAMP_PIN == 0)
// 1299     ret = 0;
        MOV     C,0x80.6
        CLR     A
        RLC     A
        MOV     R1,A
// 1300   else
// 1301     ret = 1;
// 1302   
// 1303   return ret;
        LJMP    ?BRET
        CFI EndBlock cfiBlock13
        REQUIRE _A_P0
// 1304 }
// 1305 
// 1306 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1307 uint8 GetBfan( void )
GetBfan:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function GetBfan
        CODE
// 1308 {
        ; Saved register size: 0
        ; Auto size: 0
// 1309   uint8 ret;
// 1310   
// 1311   if(Bfan_PIN == 0)
// 1312     ret = 0;
        MOV     C,0x80.4
        CLR     A
        RLC     A
        MOV     R1,A
// 1313   else
// 1314     ret = 1;
// 1315   
// 1316   return ret;
        LJMP    ?BRET
        CFI EndBlock cfiBlock14
        REQUIRE _A_P0
// 1317 }
// 1318 

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1319 uint8 GetSfan( void )
GetSfan:
        CFI Block cfiBlock15 Using cfiCommon0
        CFI Function GetSfan
        CODE
// 1320 {
        ; Saved register size: 0
        ; Auto size: 0
// 1321   uint8 ret;
// 1322   
// 1323   if(Sfan_PIN == 0)
// 1324     ret = 0;
        MOV     C,0x80.0
        CLR     A
        RLC     A
        MOV     R1,A
// 1325   else
// 1326     ret = 1;
// 1327   
// 1328   return ret;
        LJMP    ?BRET
        CFI EndBlock cfiBlock15
        REQUIRE _A_P0
// 1329 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for EndDeviceID>`:
        DATA16
        DW 1

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_ProcessMSGCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_ProcessMSGCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SendData?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SendData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_Send?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_Send

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_Resp?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_Resp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_CallBack

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetHUM?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetHUM

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetDRIP?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetDRIP

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetLED?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetLED

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Getheat?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Getheat

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetDAMP?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetDAMP

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetBfan?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetBfan

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetSfan?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GetSfan

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Temperature: ">`:
        DB "Temperature: "
        DB 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Humidity: ">`:
        DB "Humidity: "
        DB 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2710:
        DD 10000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_64:
        DD 100

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_a:
        DD 10

        END
// 1330 //-------------------------------------------------------------------
// 1331 
// 1332 
// 1333 
// 1334 /*********************************************************************
// 1335 *********************************************************************/
// 
// 2 919 bytes in segment BANKED_CODE
//    96 bytes in segment BANK_RELAYS
//     3 bytes in segment SFR_AN
//     2 bytes in segment XDATA_I
//     2 bytes in segment XDATA_ID
//   117 bytes in segment XDATA_ROM_C
//   256 bytes in segment XDATA_Z
// 
// 3 017 bytes of CODE  memory
//   101 bytes of CONST memory (+ 16 bytes shared)
//     0 bytes of DATA  memory (+  3 bytes shared)
//   258 bytes of XDATA memory
//
//Errors: none
//Warnings: 4
